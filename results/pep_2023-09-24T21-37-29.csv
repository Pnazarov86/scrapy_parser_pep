number,name,status
PEP 1 – PEP Purpose and Guidelines,PEP 1 – PEP Purpose and Guidelines,Active
PEP 20 – The Zen of Python,PEP 20 – The Zen of Python,Active
PEP 13 – Python Language Governance,PEP 13 – Python Language Governance,Active
PEP 160 – Python 1.6 Release Schedule,PEP 160 – Python 1.6 Release Schedule,Final
PEP 42 – Feature Requests,PEP 42 – Feature Requests,Withdrawn
PEP 100 – Python Unicode Integration,PEP 100 – Python Unicode Integration,Final
PEP 200 – Python 2.0 Release Schedule,PEP 200 – Python 2.0 Release Schedule,Final
PEP 101 – Doing Python Releases 101,PEP 101 – Doing Python Releases 101,Active
PEP 102 – Doing Python Micro Releases,PEP 102 – Doing Python Micro Releases,Superseded
PEP 103 – Collecting information about git,PEP 103 – Collecting information about git,Withdrawn
PEP 11 – CPython platform support,PEP 11 – CPython platform support,Active
PEP 12 – Sample reStructuredText PEP Template,PEP 12 – Sample reStructuredText PEP Template,Active
PEP 10 – Voting Guidelines,PEP 10 – Voting Guidelines,Active
PEP 7 – Style Guide for C Code,PEP 7 – Style Guide for C Code,Active
PEP 9 – Sample Plaintext PEP Template,PEP 9 – Sample Plaintext PEP Template,Withdrawn
PEP 362 – Function Signature Object,PEP 362 – Function Signature Object,Final
PEP 8 – Style Guide for Python Code,PEP 8 – Style Guide for Python Code,Active
PEP 266 – Optimizing Global Variable/Attribute Access,PEP 266 – Optimizing Global Variable/Attribute Access,Withdrawn
PEP 457 – Notation For Positional-Only Parameters,PEP 457 – Notation For Positional-Only Parameters,Final
PEP 435 – Adding an Enum type to the Python standard library,PEP 435 – Adding an Enum type to the Python standard library,Final
PEP 458 – Secure PyPI downloads with signed repository metadata,PEP 458 – Secure PyPI downloads with signed repository metadata,Accepted
PEP 479 – Change StopIteration handling inside generators,PEP 479 – Change StopIteration handling inside generators,Final
PEP 478 – Python 3.5 Release Schedule,PEP 478 – Python 3.5 Release Schedule,Final
PEP 477 – Backport ensurepip (PEP 453) to Python 2.7,PEP 477 – Backport ensurepip (PEP 453) to Python 2.7,Final
PEP 476 – Enabling certificate verification by default for stdlib http clients,PEP 476 – Enabling certificate verification by default for stdlib http clients,Final
PEP 496 – Environment Markers,PEP 496 – Environment Markers,Rejected
PEP 495 – Local Time Disambiguation,PEP 495 – Local Time Disambiguation,Final
PEP 511 – API for code transformers,PEP 511 – API for code transformers,Rejected
PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages,PEP 480 – Surviving a Compromise of PyPI: End-to-end signing of packages,Draft
PEP 530 – Asynchronous Comprehensions,PEP 530 – Asynchronous Comprehensions,Final
PEP 529 – Change Windows filesystem encoding to UTF-8,PEP 529 – Change Windows filesystem encoding to UTF-8,Final
PEP 528 – Change Windows console encoding to UTF-8,PEP 528 – Change Windows console encoding to UTF-8,Final
PEP 527 – Removing Un(der)used file types/extensions on PyPI,PEP 527 – Removing Un(der)used file types/extensions on PyPI,Final
PEP 551 – Security transparency in the Python runtime,PEP 551 – Security transparency in the Python runtime,Withdrawn
PEP 526 – Syntax for Variable Annotations,PEP 526 – Syntax for Variable Annotations,Final
PEP 553 – Built-in breakpoint(),PEP 553 – Built-in breakpoint(),Final
PEP 552 – Deterministic pycs,PEP 552 – Deterministic pycs,Final
PEP 577 – Augmented Assignment Expressions,PEP 577 – Augmented Assignment Expressions,Withdrawn
PEP 576 – Rationalize Built-in function classes,PEP 576 – Rationalize Built-in function classes,Withdrawn
PEP 575 – Unifying function/method classes,PEP 575 – Unifying function/method classes,Withdrawn
PEP 574 – Pickle protocol 5 with out-of-band data,PEP 574 – Pickle protocol 5 with out-of-band data,Final
PEP 597 – Add optional EncodingWarning,PEP 597 – Add optional EncodingWarning,Final
PEP 596 – Python 3.9 Release Schedule,PEP 596 – Python 3.9 Release Schedule,Active
PEP 595 – Improving bugs.python.org,PEP 595 – Improving bugs.python.org,Withdrawn
PEP 594 – Removing dead batteries from the standard library,PEP 594 – Removing dead batteries from the standard library,Final
PEP 616 – String methods to remove prefixes and suffixes,PEP 616 – String methods to remove prefixes and suffixes,Final
PEP 614 – Relaxing Grammar Restrictions On Decorators,PEP 614 – Relaxing Grammar Restrictions On Decorators,Final
PEP 613 – Explicit Type Aliases,PEP 613 – Explicit Type Aliases,Accepted
PEP 640 – Unused variable syntax,PEP 640 – Unused variable syntax,Rejected
PEP 638 – Syntactic Macros,PEP 638 – Syntactic Macros,Draft
PEP 637 – Support for indexing with keyword arguments,PEP 637 – Support for indexing with keyword arguments,Rejected
PEP 615 – Support for the IANA Time Zone Database in the Standard Library,PEP 615 – Support for the IANA Time Zone Database in the Standard Library,Accepted
PEP 660 – Editable installs for pyproject.toml based builds (wheel based),PEP 660 – Editable installs for pyproject.toml based builds (wheel based),Final
PEP 659 – Specializing Adaptive Interpreter,PEP 659 – Specializing Adaptive Interpreter,Draft
PEP 658 – Serve Distribution Metadata in the Simple Repository API,PEP 658 – Serve Distribution Metadata in the Simple Repository API,Accepted
PEP 639 – Improving License Clarity with Better Package Metadata,PEP 639 – Improving License Clarity with Better Package Metadata,Draft
PEP 698 – Override Decorator for Static Typing,PEP 698 – Override Decorator for Static Typing,Accepted
PEP 674 – Disallow using macros as l-values,PEP 674 – Disallow using macros as l-values,Deferred
PEP 700 – Additional Fields for the Simple API for Package Indexes,PEP 700 – Additional Fields for the Simple API for Package Indexes,Accepted
PEP 675 – Arbitrary Literal String Type,PEP 675 – Arbitrary Literal String Type,Accepted
PEP 657 – Include Fine Grained Error Locations in Tracebacks,PEP 657 – Include Fine Grained Error Locations in Tracebacks,Final
PEP 677 – Callable Type Syntax,PEP 677 – Callable Type Syntax,Rejected
PEP 676 – PEP Infrastructure Process,PEP 676 – PEP Infrastructure Process,Active
PEP 699 – Remove private dict version field added in PEP 509,PEP 699 – Remove private dict version field added in PEP 509,Accepted
PEP 715 – Disabling bdist_egg distribution uploads on PyPI,PEP 715 – Disabling bdist_egg distribution uploads on PyPI,Final
PEP 719 – Python 3.13 Release Schedule,PEP 719 – Python 3.13 Release Schedule,Active
PEP 718 – Subscriptable functions,PEP 718 – Subscriptable functions,Draft
PEP 3111 – Simple input built-in in Python 3000,PEP 3111 – Simple input built-in in Python 3000,Final
PEP 3110 – Catching Exceptions in Python 3000,PEP 3110 – Catching Exceptions in Python 3000,Final
PEP 3109 – Raising Exceptions in Python 3000,PEP 3109 – Raising Exceptions in Python 3000,Final
PEP 720 – Cross-compiling Python packages,PEP 720 – Cross-compiling Python packages,Draft
PEP 8000 – Python Language Governance Proposal Overview,PEP 8000 – Python Language Governance Proposal Overview,Final
PEP 3108 – Standard Library Reorganization,PEP 3108 – Standard Library Reorganization,Final
PEP 8010 – The Technical Leader Governance Model,PEP 8010 – The Technical Leader Governance Model,Rejected
PEP 8001 – Python Governance Voting Process,PEP 8001 – Python Governance Voting Process,Final
PEP 8104 – 2023 Term Steering Council election,PEP 8104 – 2023 Term Steering Council election,Active
PEP 8103 – 2022 Term Steering Council election,PEP 8103 – 2022 Term Steering Council election,Final
PEP 3333 – Python Web Server Gateway Interface v1.0.1,PEP 3333 – Python Web Server Gateway Interface v1.0.1,Final
PEP 3155 – Qualified name for classes and functions,PEP 3155 – Qualified name for classes and functions,Final
PEP 3156 – Asynchronous IO Support Rebooted: the “asyncio” Module,PEP 3156 – Asynchronous IO Support Rebooted: the “asyncio” Module,Final
PEP 8016 – The Steering Council Model,PEP 8016 – The Steering Council Model,Accepted
PEP 8014 – The Commons Governance Model,PEP 8014 – The Commons Governance Model,Rejected
PEP 8101 – 2020 Term Steering Council election,PEP 8101 – 2020 Term Steering Council election,Final
PEP 8102 – 2021 Term Steering Council election,PEP 8102 – 2021 Term Steering Council election,Final
PEP 8015 – Organization of the Python community,PEP 8015 – Organization of the Python community,Rejected
PEP 8100 – January 2019 Steering Council election,PEP 8100 – January 2019 Steering Council election,Final
PEP 8013 – The External Council Governance Model,PEP 8013 – The External Council Governance Model,Rejected
PEP 8012 – The Community Governance Model,PEP 8012 – The Community Governance Model,Rejected
PEP 8011 – Python Governance Model Lead by Trio of Pythonistas,PEP 8011 – Python Governance Model Lead by Trio of Pythonistas,Rejected
PEP 3153 – Asynchronous IO support,PEP 3153 – Asynchronous IO support,Superseded
PEP 3154 – Pickle protocol version 4,PEP 3154 – Pickle protocol version 4,Final
PEP 3152 – Cofunctions,PEP 3152 – Cofunctions,Rejected
PEP 3151 – Reworking the OS and IO exception hierarchy,PEP 3151 – Reworking the OS and IO exception hierarchy,Final
PEP 3150 – Statement local namespaces (aka “given” clause),PEP 3150 – Statement local namespaces (aka “given” clause),Deferred
PEP 3149 – ABI version tagged .so files,PEP 3149 – ABI version tagged .so files,Final
PEP 3148 – futures - execute computations asynchronously,PEP 3148 – futures - execute computations asynchronously,Final
PEP 3147 – PYC Repository Directories,PEP 3147 – PYC Repository Directories,Final
PEP 3146 – Merging Unladen Swallow into CPython,PEP 3146 – Merging Unladen Swallow into CPython,Withdrawn
PEP 3145 – Asynchronous I/O For subprocess.Popen,PEP 3145 – Asynchronous I/O For subprocess.Popen,Withdrawn
PEP 3143 – Standard daemon process library,PEP 3143 – Standard daemon process library,Deferred
PEP 3138 – String representation in Python 3000,PEP 3138 – String representation in Python 3000,Final
PEP 3144 – IP Address Manipulation Library for the Python Standard Library,PEP 3144 – IP Address Manipulation Library for the Python Standard Library,Final
PEP 3141 – A Type Hierarchy for Numbers,PEP 3141 – A Type Hierarchy for Numbers,Final
PEP 3142 – Add a “while” clause to generator expressions,PEP 3142 – Add a “while” clause to generator expressions,Rejected
"PEP 3140 – str(container) should call str(item), not repr(item)","PEP 3140 – str(container) should call str(item), not repr(item)",Rejected
PEP 3139 – Cleaning out sys and the “interpreter” module,PEP 3139 – Cleaning out sys and the “interpreter” module,Rejected
PEP 3137 – Immutable Bytes and Mutable Buffer,PEP 3137 – Immutable Bytes and Mutable Buffer,Final
PEP 3136 – Labeled break and continue,PEP 3136 – Labeled break and continue,Rejected
PEP 3135 – New Super,PEP 3135 – New Super,Final
PEP 3134 – Exception Chaining and Embedded Tracebacks,PEP 3134 – Exception Chaining and Embedded Tracebacks,Final
PEP 3133 – Introducing Roles,PEP 3133 – Introducing Roles,Rejected
PEP 3132 – Extended Iterable Unpacking,PEP 3132 – Extended Iterable Unpacking,Final
PEP 3131 – Supporting Non-ASCII Identifiers,PEP 3131 – Supporting Non-ASCII Identifiers,Final
PEP 8002 – Open Source Governance Survey,PEP 8002 – Open Source Governance Survey,Final
PEP 3130 – Access to Current Module/Class/Function,PEP 3130 – Access to Current Module/Class/Function,Rejected
PEP 3125 – Remove Backslash Continuation,PEP 3125 – Remove Backslash Continuation,Rejected
PEP 3129 – Class Decorators,PEP 3129 – Class Decorators,Final
PEP 3126 – Remove Implicit String Concatenation,PEP 3126 – Remove Implicit String Concatenation,Rejected
PEP 3128 – BList: A Faster List-like Type,PEP 3128 – BList: A Faster List-like Type,Rejected
"PEP 3124 – Overloading, Generic Functions, Interfaces, and Adaptation","PEP 3124 – Overloading, Generic Functions, Interfaces, and Adaptation",Deferred
PEP 3127 – Integer Literal Support and Syntax,PEP 3127 – Integer Literal Support and Syntax,Final
PEP 3123 – Making PyObject_HEAD conform to standard C,PEP 3123 – Making PyObject_HEAD conform to standard C,Final
PEP 3122 – Delineation of the main module,PEP 3122 – Delineation of the main module,Rejected
PEP 3117 – Postfix type declarations,PEP 3117 – Postfix type declarations,Rejected
PEP 3120 – Using UTF-8 as the default source encoding,PEP 3120 – Using UTF-8 as the default source encoding,Final
PEP 3121 – Extension Module Initialization and Finalization,PEP 3121 – Extension Module Initialization and Finalization,Accepted
PEP 3118 – Revising the buffer protocol,PEP 3118 – Revising the buffer protocol,Final
PEP 3119 – Introducing Abstract Base Classes,PEP 3119 – Introducing Abstract Base Classes,Final
PEP 3115 – Metaclasses in Python 3000,PEP 3115 – Metaclasses in Python 3000,Final
PEP 3114 – Renaming iterator.next() to iterator.__next__(),PEP 3114 – Renaming iterator.next() to iterator.__next__(),Final
PEP 3116 – New I/O,PEP 3116 – New I/O,Final
"PEP 3106 – Revamping dict.keys(), .values() and .items()","PEP 3106 – Revamping dict.keys(), .values() and .items()",Final
PEP 3112 – Bytes literals in Python 3000,PEP 3112 – Bytes literals in Python 3000,Final
PEP 3107 – Function Annotations,PEP 3107 – Function Annotations,Final
PEP 3113 – Removal of Tuple Parameter Unpacking,PEP 3113 – Removal of Tuple Parameter Unpacking,Final
PEP 3104 – Access to Names in Outer Scopes,PEP 3104 – Access to Names in Outer Scopes,Final
PEP 3103 – A Switch/Case Statement,PEP 3103 – A Switch/Case Statement,Rejected
PEP 3105 – Make print a function,PEP 3105 – Make print a function,Final
PEP 3102 – Keyword-Only Arguments,PEP 3102 – Keyword-Only Arguments,Final
PEP 3002 – Procedure for Backwards-Incompatible Changes,PEP 3002 – Procedure for Backwards-Incompatible Changes,Final
PEP 3001 – Procedure for reviewing and improving standard library modules,PEP 3001 – Procedure for reviewing and improving standard library modules,Withdrawn
PEP 3000 – Python 3000,PEP 3000 – Python 3000,Final
PEP 3101 – Advanced String Formatting,PEP 3101 – Advanced String Formatting,Final
PEP 3100 – Miscellaneous Python 3.0 Plans,PEP 3100 – Miscellaneous Python 3.0 Plans,Final
PEP 3099 – Things that will Not Change in Python 3000,PEP 3099 – Things that will Not Change in Python 3000,Final
PEP 3003 – Python Language Moratorium,PEP 3003 – Python Language Moratorium,Final
PEP 754 – IEEE 754 Floating Point Special Values,PEP 754 – IEEE 754 Floating Point Special Values,Rejected
PEP 727 – Documentation Metadata in Typing,PEP 727 – Documentation Metadata in Typing,Draft
PEP 726 – Module ,PEP 726 – Module,Draft
PEP 725 – Specifying external dependencies in pyproject.toml,PEP 725 – Specifying external dependencies in pyproject.toml,Draft
PEP 724 – Stricter Type Guards,PEP 724 – Stricter Type Guards,Draft
PEP 723 – Embedding pyproject.toml in single-file scripts,PEP 723 – Embedding pyproject.toml in single-file scripts,Draft
PEP 722 – Dependency specification for single-file scripts,PEP 722 – Dependency specification for single-file scripts,Draft
PEP 801 – Reserved,PEP 801 – Reserved,Active
PEP 721 – Using tarfile.data_filter for source distribution extraction,PEP 721 – Using tarfile.data_filter for source distribution extraction,Final
PEP 714 – Rename dist-info-metadata in the Simple API,PEP 714 – Rename dist-info-metadata in the Simple API,Accepted
PEP 713 – Callable Modules,PEP 713 – Callable Modules,Rejected
PEP 711 – PyBI: a standard format for distributing Python Binaries,PEP 711 – PyBI: a standard format for distributing Python Binaries,Draft
PEP 710 – Recording the provenance of installed packages,PEP 710 – Recording the provenance of installed packages,Draft
PEP 709 – Inlined comprehensions,PEP 709 – Inlined comprehensions,Accepted
PEP 708 – Extending the Repository API to Mitigate Dependency Confusion Attacks,PEP 708 – Extending the Repository API to Mitigate Dependency Confusion Attacks,Provisional
PEP 712 – Adding a “converter” parameter to dataclasses.field,PEP 712 – Adding a “converter” parameter to dataclasses.field,Draft
PEP 706 – Filter for tarfile.extractall,PEP 706 – Filter for tarfile.extractall,Final
PEP 705 – TypedMapping: Type Hints for Mappings with a Fixed Set of Keys,PEP 705 – TypedMapping: Type Hints for Mappings with a Fixed Set of Keys,Draft
PEP 704 – Require virtual environments by default for package installers,PEP 704 – Require virtual environments by default for package installers,Withdrawn
PEP 703 – Making the Global Interpreter Lock Optional in CPython,PEP 703 – Making the Global Interpreter Lock Optional in CPython,Draft
PEP 702 – Marking deprecations using the type system,PEP 702 – Marking deprecations using the type system,Draft
PEP 701 – Syntactic formalization of f-strings,PEP 701 – Syntactic formalization of f-strings,Accepted
PEP 697 – Limited C API for Extending Opaque Types,PEP 697 – Limited C API for Extending Opaque Types,Final
PEP 707 – A simplified signature for __exit__ and __aexit__,PEP 707 – A simplified signature for __exit__ and __aexit__,Rejected
PEP 696 – Type defaults for TypeVarLikes,PEP 696 – Type defaults for TypeVarLikes,Draft
PEP 694 – Upload 2.0 API for Python Package Repositories,PEP 694 – Upload 2.0 API for Python Package Repositories,Draft
PEP 693 – Python 3.12 Release Schedule,PEP 693 – Python 3.12 Release Schedule,Active
PEP 692 – Using TypedDict for more precise **kwargs typing,PEP 692 – Using TypedDict for more precise **kwargs typing,Accepted
PEP 691 – JSON-based Simple API for Python Package Indexes,PEP 691 – JSON-based Simple API for Python Package Indexes,Accepted
PEP 695 – Type Parameter Syntax,PEP 695 – Type Parameter Syntax,Accepted
PEP 690 – Lazy Imports,PEP 690 – Lazy Imports,Rejected
PEP 689 – Unstable C API tier,PEP 689 – Unstable C API tier,Final
PEP 687 – Isolating modules in the standard library,PEP 687 – Isolating modules in the standard library,Accepted
PEP 685 – Comparison of extra names for optional distribution dependencies,PEP 685 – Comparison of extra names for optional distribution dependencies,Accepted
PEP 688 – Making the buffer protocol accessible in Python,PEP 688 – Making the buffer protocol accessible in Python,Accepted
PEP 684 – A Per-Interpreter GIL,PEP 684 – A Per-Interpreter GIL,Accepted
PEP 686 – Make UTF-8 mode default,PEP 686 – Make UTF-8 mode default,Accepted
"PEP 683 – Immortal Objects, Using a Fixed Refcount","PEP 683 – Immortal Objects, Using a Fixed Refcount",Accepted
PEP 682 – Format Specifier for Signed Zero,PEP 682 – Format Specifier for Signed Zero,Final
PEP 681 – Data Class Transforms,PEP 681 – Data Class Transforms,Accepted
PEP 678 – Enriching Exceptions with Notes,PEP 678 – Enriching Exceptions with Notes,Accepted
PEP 680 – tomllib: Support for Parsing TOML in the Standard Library,PEP 680 – tomllib: Support for Parsing TOML in the Standard Library,Accepted
PEP 679 – Allow parentheses in assert statements,PEP 679 – Allow parentheses in assert statements,Draft
PEP 673 – Self Type,PEP 673 – Self Type,Accepted
PEP 672 – Unicode-related Security Considerations for Python,PEP 672 – Unicode-related Security Considerations for Python,Active
PEP 671 – Syntax for late-bound function argument defaults,PEP 671 – Syntax for late-bound function argument defaults,Draft
PEP 670 – Convert macros to functions in the Python C API,PEP 670 – Convert macros to functions in the Python C API,Final
PEP 667 – Consistent views of namespaces,PEP 667 – Consistent views of namespaces,Draft
PEP 669 – Low Impact Monitoring for CPython,PEP 669 – Low Impact Monitoring for CPython,Accepted
PEP 668 – Marking Python base environments as “externally managed”,PEP 668 – Marking Python base environments as “externally managed”,Accepted
PEP 666 – Reject Foolish Indentation,PEP 666 – Reject Foolish Indentation,Rejected
PEP 665 – A file format to list Python dependencies for reproducibility of an application,PEP 665 – A file format to list Python dependencies for reproducibility of an application,Rejected
"PEP 663 – Standardizing Enum str(), repr(), and format() behaviors","PEP 663 – Standardizing Enum str(), repr(), and format() behaviors",Rejected
PEP 662 – Editable installs via virtual wheels,PEP 662 – Editable installs via virtual wheels,Rejected
PEP 664 – Python 3.11 Release Schedule,PEP 664 – Python 3.11 Release Schedule,Active
PEP 661 – Sentinel Values,PEP 661 – Sentinel Values,Draft
PEP 655 – Marking individual TypedDict items as required or potentially-missing,PEP 655 – Marking individual TypedDict items as required or potentially-missing,Accepted
PEP 656 – Platform Tag for Linux Distributions Using Musl,PEP 656 – Platform Tag for Linux Distributions Using Musl,Final
PEP 654 – Exception Groups and except*,PEP 654 – Exception Groups and except*,Accepted
PEP 647 – User-Defined Type Guards,PEP 647 – User-Defined Type Guards,Accepted
PEP 653 – Precise Semantics for Pattern Matching,PEP 653 – Precise Semantics for Pattern Matching,Draft
PEP 652 – Maintaining the Stable ABI,PEP 652 – Maintaining the Stable ABI,Final
PEP 651 – Robust Stack Overflow Handling,PEP 651 – Robust Stack Overflow Handling,Rejected
PEP 650 – Specifying Installer Requirements for Python Projects,PEP 650 – Specifying Installer Requirements for Python Projects,Withdrawn
PEP 648 – Extensible customizations of the interpreter at startup,PEP 648 – Extensible customizations of the interpreter at startup,Rejected
PEP 649 – Deferred Evaluation Of Annotations Using Descriptors,PEP 649 – Deferred Evaluation Of Annotations Using Descriptors,Accepted
PEP 646 – Variadic Generics,PEP 646 – Variadic Generics,Accepted
PEP 643 – Metadata for Package Source Distributions,PEP 643 – Metadata for Package Source Distributions,Final
PEP 644 – Require OpenSSL 1.1.1 or newer,PEP 644 – Require OpenSSL 1.1.1 or newer,Final
PEP 641 – Using an underscore in the version portion of Python 3.10 compatibility tags,PEP 641 – Using an underscore in the version portion of Python 3.10 compatibility tags,Rejected
PEP 642 – Explicit Pattern Syntax for Structural Pattern Matching,PEP 642 – Explicit Pattern Syntax for Structural Pattern Matching,Rejected
PEP 645 – Allow writing optional types as ,PEP 645 – Allow writing optional types as,Withdrawn
PEP 634 – Structural Pattern Matching: Specification,PEP 634 – Structural Pattern Matching: Specification,Accepted
PEP 635 – Structural Pattern Matching: Motivation and Rationale,PEP 635 – Structural Pattern Matching: Motivation and Rationale,Final
PEP 636 – Structural Pattern Matching: Tutorial,PEP 636 – Structural Pattern Matching: Tutorial,Final
PEP 628 – Add ,PEP 628 – Add,Final
PEP 627 – Recording installed projects,PEP 627 – Recording installed projects,Final
PEP 626 – Precise line numbers for debugging and other tools.,PEP 626 – Precise line numbers for debugging and other tools.,Final
PEP 629 – Versioning PyPI’s Simple API,PEP 629 – Versioning PyPI’s Simple API,Final
PEP 633 – Dependency specification in pyproject.toml using an exploded TOML table,PEP 633 – Dependency specification in pyproject.toml using an exploded TOML table,Rejected
PEP 631 – Dependency specification in pyproject.toml based on PEP 508,PEP 631 – Dependency specification in pyproject.toml based on PEP 508,Superseded
PEP 632 – Deprecate distutils module,PEP 632 – Deprecate distutils module,Accepted
PEP 630 – Isolating Extension Modules,PEP 630 – Isolating Extension Modules,Final
PEP 625 – Filename of a Source Distribution,PEP 625 – Filename of a Source Distribution,Accepted
PEP 624 – Remove Py_UNICODE encoder APIs,PEP 624 – Remove Py_UNICODE encoder APIs,Final
PEP 623 – Remove wstr from Unicode,PEP 623 – Remove wstr from Unicode,Final
PEP 621 – Storing project metadata in pyproject.toml,PEP 621 – Storing project metadata in pyproject.toml,Final
PEP 620 – Hide implementation details from the C API,PEP 620 – Hide implementation details from the C API,Withdrawn
PEP 619 – Python 3.10 Release Schedule,PEP 619 – Python 3.10 Release Schedule,Active
PEP 618 – Add Optional Length-Checking To zip,PEP 618 – Add Optional Length-Checking To zip,Final
PEP 622 – Structural Pattern Matching,PEP 622 – Structural Pattern Matching,Superseded
PEP 606 – Python Compatibility Version,PEP 606 – Python Compatibility Version,Rejected
PEP 612 – Parameter Specification Variables,PEP 612 – Parameter Specification Variables,Accepted
PEP 611 – The one million limit,PEP 611 – The one million limit,Withdrawn
PEP 617 – New PEG parser for CPython,PEP 617 – New PEG parser for CPython,Accepted
PEP 607 – Reducing CPython’s Feature Delivery Latency,PEP 607 – Reducing CPython’s Feature Delivery Latency,Final
PEP 608 – Coordinated Python release,PEP 608 – Coordinated Python release,Rejected
PEP 609 – Python Packaging Authority (PyPA) Governance,PEP 609 – Python Packaging Authority (PyPA) Governance,Active
PEP 610 – Recording the Direct URL Origin of installed distributions,PEP 610 – Recording the Direct URL Origin of installed distributions,Final
PEP 604 – Allow writing union types as ,PEP 604 – Allow writing union types as,Accepted
PEP 603 – Adding a frozenmap type to collections,PEP 603 – Adding a frozenmap type to collections,Draft
PEP 602 – Annual Release Cycle for Python,PEP 602 – Annual Release Cycle for Python,Accepted
PEP 601 – Forbid return/break/continue breaking out of finally,PEP 601 – Forbid return/break/continue breaking out of finally,Rejected
PEP 600 – Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,PEP 600 – Future ‘manylinux’ Platform Tags for Portable Linux Built Distributions,Final
PEP 599 – The manylinux2014 Platform Tag,PEP 599 – The manylinux2014 Platform Tag,Superseded
PEP 598 – Introducing incremental feature releases,PEP 598 – Introducing incremental feature releases,Withdrawn
PEP 605 – A rolling feature release stream for CPython,PEP 605 – A rolling feature release stream for CPython,Rejected
PEP 590 – Vectorcall: a fast calling protocol for CPython,PEP 590 – Vectorcall: a fast calling protocol for CPython,Accepted
PEP 591 – Adding a final qualifier to typing,PEP 591 – Adding a final qualifier to typing,Accepted
PEP 588 – GitHub Issues Migration Plan,PEP 588 – GitHub Issues Migration Plan,Draft
PEP 587 – Python Initialization Configuration,PEP 587 – Python Initialization Configuration,Final
PEP 592 – Adding “Yank” Support to the Simple API,PEP 592 – Adding “Yank” Support to the Simple API,Final
PEP 593 – Flexible function and variable annotations,PEP 593 – Flexible function and variable annotations,Accepted
PEP 589 – TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,PEP 589 – TypedDict: Type Hints for Dictionaries with a Fixed Set of Keys,Accepted
PEP 586 – Literal Types,PEP 586 – Literal Types,Accepted
PEP 585 – Type Hinting Generics In Standard Collections,PEP 585 – Type Hinting Generics In Standard Collections,Final
PEP 584 – Add Union Operators To dict,PEP 584 – Add Union Operators To dict,Final
PEP 583 – A Concurrency Memory Model for Python,PEP 583 – A Concurrency Memory Model for Python,Withdrawn
PEP 580 – The C call protocol,PEP 580 – The C call protocol,Rejected
PEP 582 – Python local packages directory,PEP 582 – Python local packages directory,Rejected
PEP 579 – Refactoring C functions and methods,PEP 579 – Refactoring C functions and methods,Final
PEP 581 – Using GitHub Issues for CPython,PEP 581 – Using GitHub Issues for CPython,Accepted
PEP 573 – Module State Access from C Extension Methods,PEP 573 – Module State Access from C Extension Methods,Final
PEP 572 – Assignment Expressions,PEP 572 – Assignment Expressions,Final
PEP 571 – The manylinux2010 Platform Tag,PEP 571 – The manylinux2010 Platform Tag,Superseded
PEP 570 – Python Positional-Only Parameters,PEP 570 – Python Positional-Only Parameters,Final
PEP 578 – Python Runtime Audit Hooks,PEP 578 – Python Runtime Audit Hooks,Accepted
PEP 569 – Python 3.8 Release Schedule,PEP 569 – Python 3.8 Release Schedule,Active
PEP 568 – Generator-sensitivity for Context Variables,PEP 568 – Generator-sensitivity for Context Variables,Deferred
PEP 567 – Context Variables,PEP 567 – Context Variables,Final
PEP 566 – Metadata for Python Software Packages 2.1,PEP 566 – Metadata for Python Software Packages 2.1,Final
PEP 565 – Show DeprecationWarning in __main__,PEP 565 – Show DeprecationWarning in __main__,Final
PEP 564 – Add new time functions with nanosecond resolution,PEP 564 – Add new time functions with nanosecond resolution,Final
PEP 563 – Postponed Evaluation of Annotations,PEP 563 – Postponed Evaluation of Annotations,Accepted
PEP 562 – Module __getattr__ and __dir__,PEP 562 – Module __getattr__ and __dir__,Final
PEP 561 – Distributing and Packaging Type Information,PEP 561 – Distributing and Packaging Type Information,Final
PEP 560 – Core support for typing module and generic types,PEP 560 – Core support for typing module and generic types,Accepted
PEP 559 – Built-in noop(),PEP 559 – Built-in noop(),Rejected
PEP 558 – Defined semantics for locals(),PEP 558 – Defined semantics for locals(),Deferred
PEP 557 – Data Classes,PEP 557 – Data Classes,Final
PEP 556 – Threaded garbage collection,PEP 556 – Threaded garbage collection,Deferred
PEP 555 – Context-local variables (contextvars),PEP 555 – Context-local variables (contextvars),Withdrawn
PEP 554 – Multiple Interpreters in the Stdlib,PEP 554 – Multiple Interpreters in the Stdlib,Draft
PEP 549 – Instance Descriptors,PEP 549 – Instance Descriptors,Rejected
PEP 548 – More Flexible Loop Control,PEP 548 – More Flexible Loop Control,Rejected
PEP 550 – Execution Context,PEP 550 – Execution Context,Withdrawn
PEP 545 – Python Documentation Translations,PEP 545 – Python Documentation Translations,Final
PEP 547 – Running extension modules using the -m option,PEP 547 – Running extension modules using the -m option,Deferred
PEP 546 – Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,PEP 546 – Backport ssl.MemoryBIO and ssl.SSLObject to Python 2.7,Rejected
PEP 543 – A Unified TLS API for Python,PEP 543 – A Unified TLS API for Python,Withdrawn
PEP 544 – Protocols: Structural subtyping (static duck typing),PEP 544 – Protocols: Structural subtyping (static duck typing),Accepted
PEP 541 – Package Index Name Retention,PEP 541 – Package Index Name Retention,Final
PEP 542 – Dot Notation Assignment In Function Header,PEP 542 – Dot Notation Assignment In Function Header,Rejected
PEP 540 – Add a new UTF-8 Mode,PEP 540 – Add a new UTF-8 Mode,Final
PEP 536 – Final Grammar for Literal String Interpolation,PEP 536 – Final Grammar for Literal String Interpolation,Deferred
PEP 538 – Coercing the legacy C locale to a UTF-8 based locale,PEP 538 – Coercing the legacy C locale to a UTF-8 based locale,Final
PEP 537 – Python 3.7 Release Schedule,PEP 537 – Python 3.7 Release Schedule,Final
PEP 539 – A New C-API for Thread-Local Storage in CPython,PEP 539 – A New C-API for Thread-Local Storage in CPython,Final
PEP 535 – Rich comparison chaining,PEP 535 – Rich comparison chaining,Deferred
PEP 534 – Improved Errors for Missing Standard Library Modules,PEP 534 – Improved Errors for Missing Standard Library Modules,Deferred
PEP 532 – A circuit breaking protocol and binary operators,PEP 532 – A circuit breaking protocol and binary operators,Deferred
PEP 533 – Deterministic cleanup for iterators,PEP 533 – Deterministic cleanup for iterators,Deferred
PEP 531 – Existence checking operators,PEP 531 – Existence checking operators,Withdrawn
PEP 525 – Asynchronous Generators,PEP 525 – Asynchronous Generators,Final
PEP 524 – Make os.urandom() blocking on Linux,PEP 524 – Make os.urandom() blocking on Linux,Final
PEP 523 – Adding a frame evaluation API to CPython,PEP 523 – Adding a frame evaluation API to CPython,Final
PEP 522 – Allow BlockingIOError in security sensitive APIs,PEP 522 – Allow BlockingIOError in security sensitive APIs,Rejected
PEP 521 – Managing global context via ‘with’ blocks in generators and coroutines,PEP 521 – Managing global context via ‘with’ blocks in generators and coroutines,Withdrawn
PEP 519 – Adding a file system path protocol,PEP 519 – Adding a file system path protocol,Final
PEP 520 – Preserving Class Attribute Definition Order,PEP 520 – Preserving Class Attribute Definition Order,Final
PEP 518 – Specifying Minimum Build System Requirements for Python Projects,PEP 518 – Specifying Minimum Build System Requirements for Python Projects,Final
PEP 517 – A build-system independent format for source trees,PEP 517 – A build-system independent format for source trees,Final
PEP 516 – Build system abstraction for pip/conda etc,PEP 516 – Build system abstraction for pip/conda etc,Rejected
PEP 515 – Underscores in Numeric Literals,PEP 515 – Underscores in Numeric Literals,Final
PEP 514 – Python registration in the Windows registry,PEP 514 – Python registration in the Windows registry,Active
PEP 512 – Migrating from hg.python.org to GitHub,PEP 512 – Migrating from hg.python.org to GitHub,Final
PEP 510 – Specialize functions with guards,PEP 510 – Specialize functions with guards,Rejected
PEP 509 – Add a private version to dict,PEP 509 – Add a private version to dict,Superseded
PEP 508 – Dependency specification for Python Software Packages,PEP 508 – Dependency specification for Python Software Packages,Final
PEP 507 – Migrate CPython to Git and GitLab,PEP 507 – Migrate CPython to Git and GitLab,Rejected
PEP 506 – Adding A Secrets Module To The Standard Library,PEP 506 – Adding A Secrets Module To The Standard Library,Final
PEP 505 – None-aware operators,PEP 505 – None-aware operators,Deferred
PEP 513 – A Platform Tag for Portable Linux Built Distributions,PEP 513 – A Platform Tag for Portable Linux Built Distributions,Superseded
PEP 504 – Using the System RNG by default,PEP 504 – Using the System RNG by default,Withdrawn
PEP 502 – String Interpolation - Extended Discussion,PEP 502 – String Interpolation - Extended Discussion,Rejected
PEP 500 – A protocol for delegating datetime methods to their tzinfo implementations,PEP 500 – A protocol for delegating datetime methods to their tzinfo implementations,Rejected
PEP 499 – ,PEP 499 –,Deferred
PEP 498 – Literal String Interpolation,PEP 498 – Literal String Interpolation,Final
PEP 497 – A standard mechanism for backward compatibility,PEP 497 – A standard mechanism for backward compatibility,Rejected
PEP 503 – Simple Repository API,PEP 503 – Simple Repository API,Final
PEP 494 – Python 3.6 Release Schedule,PEP 494 – Python 3.6 Release Schedule,Final
PEP 501 – General purpose string interpolation,PEP 501 – General purpose string interpolation,Deferred
PEP 487 – Simpler customisation of class creation,PEP 487 – Simpler customisation of class creation,Final
PEP 486 – Make the Python Launcher aware of virtual environments,PEP 486 – Make the Python Launcher aware of virtual environments,Final
PEP 493 – HTTPS verification migration tools for Python 2.7,PEP 493 – HTTPS verification migration tools for Python 2.7,Final
PEP 491 – The Wheel Binary Package Format 1.9,PEP 491 – The Wheel Binary Package Format 1.9,Deferred
PEP 492 – Coroutines with async and await syntax,PEP 492 – Coroutines with async and await syntax,Final
PEP 488 – Elimination of PYO files,PEP 488 – Elimination of PYO files,Final
PEP 490 – Chain exceptions at C level,PEP 490 – Chain exceptions at C level,Rejected
PEP 489 – Multi-phase extension module initialization,PEP 489 – Multi-phase extension module initialization,Final
PEP 482 – Literature Overview for Type Hints,PEP 482 – Literature Overview for Type Hints,Final
PEP 485 – A Function for testing approximate equality,PEP 485 – A Function for testing approximate equality,Final
"PEP 481 – Migrate CPython to Git, Github, and Phabricator","PEP 481 – Migrate CPython to Git, Github, and Phabricator",Withdrawn
PEP 483 – The Theory of Type Hints,PEP 483 – The Theory of Type Hints,Final
PEP 484 – Type Hints,PEP 484 – Type Hints,Final
PEP 475 – Retry system calls failing with EINTR,PEP 475 – Retry system calls failing with EINTR,Final
PEP 474 – Creating forge.python.org,PEP 474 – Creating forge.python.org,Withdrawn
PEP 473 – Adding structured data to built-in exceptions,PEP 473 – Adding structured data to built-in exceptions,Rejected
PEP 472 – Support for indexing with keyword arguments,PEP 472 – Support for indexing with keyword arguments,Rejected
PEP 471 – os.scandir() function – a better and faster directory iterator,PEP 471 – os.scandir() function – a better and faster directory iterator,Final
PEP 470 – Removing External Hosting Support on PyPI,PEP 470 – Removing External Hosting Support on PyPI,Final
PEP 469 – Migration of dict iteration code to Python 3,PEP 469 – Migration of dict iteration code to Python 3,Withdrawn
PEP 467 – Minor API improvements for binary sequences,PEP 467 – Minor API improvements for binary sequences,Draft
PEP 468 – Preserving the order of **kwargs in a function.,PEP 468 – Preserving the order of **kwargs in a function.,Final
PEP 466 – Network Security Enhancements for Python 2.7.x,PEP 466 – Network Security Enhancements for Python 2.7.x,Final
PEP 465 – A dedicated infix operator for matrix multiplication,PEP 465 – A dedicated infix operator for matrix multiplication,Final
PEP 464 – Removal of the PyPI Mirror Authenticity API,PEP 464 – Removal of the PyPI Mirror Authenticity API,Final
PEP 463 – Exception-catching expressions,PEP 463 – Exception-catching expressions,Rejected
PEP 462 – Core development workflow automation for CPython,PEP 462 – Core development workflow automation for CPython,Withdrawn
PEP 461 – Adding % formatting to bytes and bytearray,PEP 461 – Adding % formatting to bytes and bytearray,Final
PEP 456 – Secure and interchangeable hash algorithm,PEP 456 – Secure and interchangeable hash algorithm,Final
PEP 460 – Add binary interpolation and formatting,PEP 460 – Add binary interpolation and formatting,Withdrawn
PEP 455 – Adding a key-transforming dictionary to collections,PEP 455 – Adding a key-transforming dictionary to collections,Rejected
PEP 454 – Add a new tracemalloc module to trace Python memory allocations,PEP 454 – Add a new tracemalloc module to trace Python memory allocations,Final
PEP 459 – Standard Metadata Extensions for Python Software Packages,PEP 459 – Standard Metadata Extensions for Python Software Packages,Withdrawn
PEP 451 – A ModuleSpec Type for the Import System,PEP 451 – A ModuleSpec Type for the Import System,Final
PEP 452 – API for Cryptographic Hash Functions v2.0,PEP 452 – API for Cryptographic Hash Functions v2.0,Final
PEP 453 – Explicit bootstrapping of pip in Python installations,PEP 453 – Explicit bootstrapping of pip in Python installations,Final
PEP 450 – Adding A Statistics Module To The Standard Library,PEP 450 – Adding A Statistics Module To The Standard Library,Final
PEP 449 – Removal of the PyPI Mirror Auto Discovery and Naming Scheme,PEP 449 – Removal of the PyPI Mirror Auto Discovery and Naming Scheme,Final
PEP 448 – Additional Unpacking Generalizations,PEP 448 – Additional Unpacking Generalizations,Final
PEP 447 – Add __getdescriptor__ method to metaclass,PEP 447 – Add __getdescriptor__ method to metaclass,Deferred
PEP 446 – Make newly created file descriptors non-inheritable,PEP 446 – Make newly created file descriptors non-inheritable,Final
PEP 445 – Add new APIs to customize Python memory allocators,PEP 445 – Add new APIs to customize Python memory allocators,Final
PEP 444 – Python Web3 Interface,PEP 444 – Python Web3 Interface,Deferred
PEP 443 – Single-dispatch generic functions,PEP 443 – Single-dispatch generic functions,Final
PEP 439 – Inclusion of implicit pip bootstrap in Python installation,PEP 439 – Inclusion of implicit pip bootstrap in Python installation,Rejected
PEP 438 – Transitioning to release-file hosting on PyPI,PEP 438 – Transitioning to release-file hosting on PyPI,Superseded
"PEP 437 – A DSL for specifying signatures, annotations and argument converters","PEP 437 – A DSL for specifying signatures, annotations and argument converters",Rejected
PEP 436 – The Argument Clinic DSL,PEP 436 – The Argument Clinic DSL,Final
PEP 441 – Improving Python ZIP Application Support,PEP 441 – Improving Python ZIP Application Support,Final
PEP 442 – Safe object finalization,PEP 442 – Safe object finalization,Final
PEP 440 – Version Identification and Dependency Specification,PEP 440 – Version Identification and Dependency Specification,Final
PEP 434 – IDLE Enhancement Exception for All Branches,PEP 434 – IDLE Enhancement Exception for All Branches,Active
PEP 430 – Migrating to Python 3 as the default online documentation,PEP 430 – Migrating to Python 3 as the default online documentation,Final
PEP 431 – Time zone support improvements,PEP 431 – Time zone support improvements,Superseded
PEP 433 – Easier suppression of file descriptor inheritance,PEP 433 – Easier suppression of file descriptor inheritance,Superseded
PEP 432 – Restructuring the CPython startup sequence,PEP 432 – Restructuring the CPython startup sequence,Withdrawn
PEP 428 – The pathlib module – object-oriented filesystem paths,PEP 428 – The pathlib module – object-oriented filesystem paths,Final
PEP 427 – The Wheel Binary Package Format 1.0,PEP 427 – The Wheel Binary Package Format 1.0,Final
PEP 426 – Metadata for Python Software Packages 2.0,PEP 426 – Metadata for Python Software Packages 2.0,Withdrawn
PEP 429 – Python 3.4 Release Schedule,PEP 429 – Python 3.4 Release Schedule,Final
PEP 422 – Simpler customisation of class creation,PEP 422 – Simpler customisation of class creation,Withdrawn
PEP 423 – Naming conventions and recipes related to packaging,PEP 423 – Naming conventions and recipes related to packaging,Deferred
PEP 425 – Compatibility Tags for Built Distributions,PEP 425 – Compatibility Tags for Built Distributions,Final
PEP 424 – A method for exposing a length hint,PEP 424 – A method for exposing a length hint,Final
PEP 421 – Adding sys.implementation,PEP 421 – Adding sys.implementation,Final
PEP 420 – Implicit Namespace Packages,PEP 420 – Implicit Namespace Packages,Final
PEP 419 – Protecting cleanup statements from interruptions,PEP 419 – Protecting cleanup statements from interruptions,Deferred
"PEP 418 – Add monotonic time, performance counter, and process time functions","PEP 418 – Add monotonic time, performance counter, and process time functions",Final
PEP 417 – Including mock in the Standard Library,PEP 417 – Including mock in the Standard Library,Final
PEP 416 – Add a frozendict builtin type,PEP 416 – Add a frozendict builtin type,Rejected
PEP 415 – Implement context suppression with exception attributes,PEP 415 – Implement context suppression with exception attributes,Final
PEP 414 – Explicit Unicode Literal for Python 3.3,PEP 414 – Explicit Unicode Literal for Python 3.3,Final
PEP 413 – Faster evolution of the Python Standard Library,PEP 413 – Faster evolution of the Python Standard Library,Withdrawn
PEP 412 – Key-Sharing Dictionary,PEP 412 – Key-Sharing Dictionary,Final
PEP 411 – Provisional packages in the Python standard library,PEP 411 – Provisional packages in the Python standard library,Superseded
PEP 410 – Use decimal.Decimal type for timestamps,PEP 410 – Use decimal.Decimal type for timestamps,Rejected
PEP 406 – Improved Encapsulation of Import State,PEP 406 – Improved Encapsulation of Import State,Withdrawn
PEP 409 – Suppressing exception context,PEP 409 – Suppressing exception context,Final
PEP 407 – New release cycle and introducing long-term support versions,PEP 407 – New release cycle and introducing long-term support versions,Deferred
PEP 408 – Standard library __preview__ package,PEP 408 – Standard library __preview__ package,Rejected
PEP 405 – Python Virtual Environments,PEP 405 – Python Virtual Environments,Final
PEP 403 – General purpose decorator clause (aka “@in” clause),PEP 403 – General purpose decorator clause (aka “@in” clause),Deferred
PEP 402 – Simplified Package Layout and Partitioning,PEP 402 – Simplified Package Layout and Partitioning,Rejected
PEP 404 – Python 2.8 Un-release Schedule,PEP 404 – Python 2.8 Un-release Schedule,Final
PEP 401 – BDFL Retirement,PEP 401 – BDFL Retirement,April Fool!
PEP 400 – Deprecate codecs.StreamReader and codecs.StreamWriter,PEP 400 – Deprecate codecs.StreamReader and codecs.StreamWriter,Deferred
PEP 398 – Python 3.3 Release Schedule,PEP 398 – Python 3.3 Release Schedule,Final
PEP 399 – Pure Python/C Accelerator Module Compatibility Requirements,PEP 399 – Pure Python/C Accelerator Module Compatibility Requirements,Final
PEP 397 – Python launcher for Windows,PEP 397 – Python launcher for Windows,Final
PEP 395 – Qualified Names for Modules,PEP 395 – Qualified Names for Modules,Withdrawn
PEP 394 – The “python” Command on Unix-Like Systems,PEP 394 – The “python” Command on Unix-Like Systems,Active
PEP 396 – Module Version Numbers,PEP 396 – Module Version Numbers,Rejected
PEP 393 – Flexible String Representation,PEP 393 – Flexible String Representation,Final
PEP 392 – Python 3.2 Release Schedule,PEP 392 – Python 3.2 Release Schedule,Final
PEP 390 – Static metadata for Distutils,PEP 390 – Static metadata for Distutils,Rejected
PEP 391 – Dictionary-Based Configuration For Logging,PEP 391 – Dictionary-Based Configuration For Logging,Final
PEP 389 – argparse - New Command Line Parsing Module,PEP 389 – argparse - New Command Line Parsing Module,Final
PEP 387 – Backwards Compatibility Policy,PEP 387 – Backwards Compatibility Policy,Active
PEP 386 – Changing the version comparison module in Distutils,PEP 386 – Changing the version comparison module in Distutils,Superseded
PEP 383 – Non-decodable Bytes in System Character Interfaces,PEP 383 – Non-decodable Bytes in System Character Interfaces,Final
PEP 384 – Defining a Stable ABI,PEP 384 – Defining a Stable ABI,Final
PEP 385 – Migrating from Subversion to Mercurial,PEP 385 – Migrating from Subversion to Mercurial,Final
PEP 382 – Namespace Packages,PEP 382 – Namespace Packages,Rejected
PEP 381 – Mirroring infrastructure for PyPI,PEP 381 – Mirroring infrastructure for PyPI,Withdrawn
PEP 379 – Adding an Assignment Expression,PEP 379 – Adding an Assignment Expression,Withdrawn
PEP 380 – Syntax for Delegating to a Subgenerator,PEP 380 – Syntax for Delegating to a Subgenerator,Final
PEP 378 – Format Specifier for Thousands Separator,PEP 378 – Format Specifier for Thousands Separator,Final
PEP 376 – Database of Installed Python Distributions,PEP 376 – Database of Installed Python Distributions,Final
PEP 377 – Allow __enter__() methods to skip the statement body,PEP 377 – Allow __enter__() methods to skip the statement body,Rejected
PEP 375 – Python 3.1 Release Schedule,PEP 375 – Python 3.1 Release Schedule,Final
PEP 373 – Python 2.7 Release Schedule,PEP 373 – Python 2.7 Release Schedule,Final
PEP 374 – Choosing a distributed VCS for the Python project,PEP 374 – Choosing a distributed VCS for the Python project,Final
PEP 372 – Adding an ordered dictionary to collections,PEP 372 – Adding an ordered dictionary to collections,Final
PEP 371 – Addition of the multiprocessing package to the standard library,PEP 371 – Addition of the multiprocessing package to the standard library,Final
PEP 369 – Post import hooks,PEP 369 – Post import hooks,Withdrawn
PEP 368 – Standard image protocol and class,PEP 368 – Standard image protocol and class,Deferred
PEP 367 – New Super,PEP 367 – New Super,Superseded
PEP 366 – Main module explicit relative imports,PEP 366 – Main module explicit relative imports,Final
PEP 365 – Adding the pkg_resources module,PEP 365 – Adding the pkg_resources module,Rejected
PEP 370 – Per user site-packages directory,PEP 370 – Per user site-packages directory,Final
PEP 361 – Python 2.6 and 3.0 Release Schedule,PEP 361 – Python 2.6 and 3.0 Release Schedule,Final
PEP 360 – Externally Maintained Packages,PEP 360 – Externally Maintained Packages,Final
PEP 359 – The “make” Statement,PEP 359 – The “make” Statement,Withdrawn
PEP 358 – The “bytes” Object,PEP 358 – The “bytes” Object,Final
PEP 357 – Allowing Any Object to be Used for Slicing,PEP 357 – Allowing Any Object to be Used for Slicing,Final
PEP 356 – Python 2.5 Release Schedule,PEP 356 – Python 2.5 Release Schedule,Final
PEP 364 – Transitioning to the Py3K Standard Library,PEP 364 – Transitioning to the Py3K Standard Library,Withdrawn
PEP 363 – Syntax For Dynamic Attribute Access,PEP 363 – Syntax For Dynamic Attribute Access,Rejected
PEP 355 – Path - Object oriented filesystem paths,PEP 355 – Path - Object oriented filesystem paths,Rejected
PEP 354 – Enumerations in Python,PEP 354 – Enumerations in Python,Superseded
PEP 353 – Using ssize_t as the index type,PEP 353 – Using ssize_t as the index type,Final
PEP 352 – Required Superclass for Exceptions,PEP 352 – Required Superclass for Exceptions,Final
PEP 351 – The freeze protocol,PEP 351 – The freeze protocol,Rejected
PEP 350 – Codetags,PEP 350 – Codetags,Rejected
PEP 349 – Allow str() to return unicode strings,PEP 349 – Allow str() to return unicode strings,Rejected
PEP 348 – Exception Reorganization for Python 3.0,PEP 348 – Exception Reorganization for Python 3.0,Rejected
PEP 347 – Migrating the Python CVS to Subversion,PEP 347 – Migrating the Python CVS to Subversion,Final
PEP 346 – User Defined (”,PEP 346 – User Defined (”,Withdrawn
PEP 345 – Metadata for Python Software Packages 1.2,PEP 345 – Metadata for Python Software Packages 1.2,Superseded
PEP 344 – Exception Chaining and Embedded Tracebacks,PEP 344 – Exception Chaining and Embedded Tracebacks,Superseded
PEP 343 – The “with” Statement,PEP 343 – The “with” Statement,Final
PEP 342 – Coroutines via Enhanced Generators,PEP 342 – Coroutines via Enhanced Generators,Final
PEP 341 – Unifying try-except and try-finally,PEP 341 – Unifying try-except and try-finally,Final
PEP 340 – Anonymous Block Statements,PEP 340 – Anonymous Block Statements,Rejected
PEP 338 – Executing modules as scripts,PEP 338 – Executing modules as scripts,Final
PEP 336 – Make None Callable,PEP 336 – Make None Callable,Rejected
PEP 337 – Logging Usage in the Standard Library,PEP 337 – Logging Usage in the Standard Library,Deferred
PEP 333 – Python Web Server Gateway Interface v1.0,PEP 333 – Python Web Server Gateway Interface v1.0,Final
PEP 335 – Overloadable Boolean Operators,PEP 335 – Overloadable Boolean Operators,Rejected
PEP 339 – Design of the CPython Compiler,PEP 339 – Design of the CPython Compiler,Withdrawn
PEP 332 – Byte vectors and String/Unicode Unification,PEP 332 – Byte vectors and String/Unicode Unification,Rejected
PEP 334 – Simple Coroutines via SuspendIteration,PEP 334 – Simple Coroutines via SuspendIteration,Withdrawn
PEP 331 – Locale-Independent Float/String Conversions,PEP 331 – Locale-Independent Float/String Conversions,Final
PEP 329 – Treating Builtins as Constants in the Standard Library,PEP 329 – Treating Builtins as Constants in the Standard Library,Rejected
PEP 330 – Python Bytecode Verification,PEP 330 – Python Bytecode Verification,Rejected
PEP 328 – Imports: Multi-Line and Absolute/Relative,PEP 328 – Imports: Multi-Line and Absolute/Relative,Final
PEP 324 – subprocess - New process module,PEP 324 – subprocess - New process module,Final
PEP 327 – Decimal Data Type,PEP 327 – Decimal Data Type,Final
PEP 325 – Resource-Release Support for Generators,PEP 325 – Resource-Release Support for Generators,Rejected
PEP 326 – A Case for Top and Bottom Values,PEP 326 – A Case for Top and Bottom Values,Rejected
PEP 321 – Date/Time Parsing and Formatting,PEP 321 – Date/Time Parsing and Formatting,Withdrawn
PEP 322 – Reverse Iteration,PEP 322 – Reverse Iteration,Final
PEP 323 – Copyable Iterators,PEP 323 – Copyable Iterators,Deferred
PEP 316 – Programming by Contract for Python,PEP 316 – Programming by Contract for Python,Deferred
PEP 320 – Python 2.4 Release Schedule,PEP 320 – Python 2.4 Release Schedule,Final
PEP 319 – Python Synchronize/Asynchronize Block,PEP 319 – Python Synchronize/Asynchronize Block,Rejected
PEP 318 – Decorators for Functions and Methods,PEP 318 – Decorators for Functions and Methods,Final
PEP 317 – Eliminate Implicit Exception Instantiation,PEP 317 – Eliminate Implicit Exception Instantiation,Rejected
PEP 312 – Simple Implicit Lambda,PEP 312 – Simple Implicit Lambda,Deferred
PEP 311 – Simplified Global Interpreter Lock Acquisition for Extensions,PEP 311 – Simplified Global Interpreter Lock Acquisition for Extensions,Final
PEP 310 – Reliable Acquisition/Release Pairs,PEP 310 – Reliable Acquisition/Release Pairs,Rejected
PEP 309 – Partial Function Application,PEP 309 – Partial Function Application,Final
PEP 308 – Conditional Expressions,PEP 308 – Conditional Expressions,Final
PEP 315 – Enhanced While Loop,PEP 315 – Enhanced While Loop,Rejected
PEP 314 – Metadata for Python Software Packages 1.1,PEP 314 – Metadata for Python Software Packages 1.1,Superseded
PEP 313 – Adding Roman Numeral Literals to Python,PEP 313 – Adding Roman Numeral Literals to Python,Rejected
PEP 307 – Extensions to the pickle protocol,PEP 307 – Extensions to the pickle protocol,Final
PEP 306 – How to Change Python’s Grammar,PEP 306 – How to Change Python’s Grammar,Withdrawn
PEP 305 – CSV File API,PEP 305 – CSV File API,Final
PEP 304 – Controlling Generation of Bytecode Files,PEP 304 – Controlling Generation of Bytecode Files,Withdrawn
PEP 303 – Extend divmod() for Multiple Divisors,PEP 303 – Extend divmod() for Multiple Divisors,Rejected
PEP 302 – New Import Hooks,PEP 302 – New Import Hooks,Final
PEP 301 – Package Index and Metadata for Distutils,PEP 301 – Package Index and Metadata for Distutils,Final
PEP 299 – Special __main__() function in modules,PEP 299 – Special __main__() function in modules,Rejected
PEP 298 – The Locked Buffer Interface,PEP 298 – The Locked Buffer Interface,Withdrawn
PEP 297 – Support for System Upgrades,PEP 297 – Support for System Upgrades,Rejected
PEP 296 – Adding a bytes Object Type,PEP 296 – Adding a bytes Object Type,Withdrawn
PEP 295 – Interpretation of multiline string constants,PEP 295 – Interpretation of multiline string constants,Rejected
PEP 294 – Type Names in the types Module,PEP 294 – Type Names in the types Module,Rejected
PEP 293 – Codec Error Handling Callbacks,PEP 293 – Codec Error Handling Callbacks,Final
PEP 292 – Simpler String Substitutions,PEP 292 – Simpler String Substitutions,Final
PEP 291 – Backward Compatibility for the Python 2 Standard Library,PEP 291 – Backward Compatibility for the Python 2 Standard Library,Final
PEP 290 – Code Migration and Modernization,PEP 290 – Code Migration and Modernization,Active
PEP 289 – Generator Expressions,PEP 289 – Generator Expressions,Final
PEP 288 – Generators Attributes and Exceptions,PEP 288 – Generators Attributes and Exceptions,Withdrawn
PEP 287 – reStructuredText Docstring Format,PEP 287 – reStructuredText Docstring Format,Active
PEP 286 – Enhanced Argument Tuples,PEP 286 – Enhanced Argument Tuples,Deferred
PEP 285 – Adding a bool type,PEP 285 – Adding a bool type,Final
PEP 284 – Integer for-loops,PEP 284 – Integer for-loops,Rejected
PEP 283 – Python 2.3 Release Schedule,PEP 283 – Python 2.3 Release Schedule,Final
PEP 275 – Switching on Multiple Values,PEP 275 – Switching on Multiple Values,Rejected
PEP 276 – Simple Iterator for ints,PEP 276 – Simple Iterator for ints,Rejected
PEP 279 – The enumerate() built-in function,PEP 279 – The enumerate() built-in function,Final
PEP 277 – Unicode file name support for Windows NT,PEP 277 – Unicode file name support for Windows NT,Final
PEP 280 – Optimizing access to globals,PEP 280 – Optimizing access to globals,Deferred
PEP 281 – Loop Counter Iteration with range and xrange,PEP 281 – Loop Counter Iteration with range and xrange,Rejected
PEP 278 – Universal Newline Support,PEP 278 – Universal Newline Support,Final
PEP 282 – A Logging System,PEP 282 – A Logging System,Final
PEP 274 – Dict Comprehensions,PEP 274 – Dict Comprehensions,Final
PEP 272 – API for Block Encryption Algorithms v1.0,PEP 272 – API for Block Encryption Algorithms v1.0,Final
PEP 271 – Prefixing sys.path by command line option,PEP 271 – Prefixing sys.path by command line option,Rejected
PEP 273 – Import Modules from Zip Archives,PEP 273 – Import Modules from Zip Archives,Final
PEP 269 – Pgen Module for Python,PEP 269 – Pgen Module for Python,Deferred
PEP 268 – Extended HTTP functionality and WebDAV,PEP 268 – Extended HTTP functionality and WebDAV,Rejected
PEP 267 – Optimized Access to Module Namespaces,PEP 267 – Optimized Access to Module Namespaces,Deferred
PEP 270 – uniq method for list objects,PEP 270 – uniq method for list objects,Rejected
PEP 265 – Sorting Dictionaries by Value,PEP 265 – Sorting Dictionaries by Value,Rejected
PEP 263 – Defining Python Source Code Encodings,PEP 263 – Defining Python Source Code Encodings,Final
PEP 264 – Future statements in simulated shells,PEP 264 – Future statements in simulated shells,Final
PEP 262 – A Database of Installed Python Packages,PEP 262 – A Database of Installed Python Packages,Rejected
PEP 261 – Support for “wide” Unicode characters,PEP 261 – Support for “wide” Unicode characters,Final
PEP 260 – Simplify xrange(),PEP 260 – Simplify xrange(),Final
PEP 259 – Omit printing newline after newline,PEP 259 – Omit printing newline after newline,Rejected
PEP 258 – Docutils Design Specification,PEP 258 – Docutils Design Specification,Rejected
PEP 255 – Simple Generators,PEP 255 – Simple Generators,Final
PEP 254 – Making Classes Look More Like Types,PEP 254 – Making Classes Look More Like Types,Rejected
PEP 257 – Docstring Conventions,PEP 257 – Docstring Conventions,Active
PEP 256 – Docstring Processing System Framework,PEP 256 – Docstring Processing System Framework,Rejected
PEP 253 – Subtyping Built-in Types,PEP 253 – Subtyping Built-in Types,Final
PEP 252 – Making Types Look More Like Classes,PEP 252 – Making Types Look More Like Classes,Final
PEP 251 – Python 2.2 Release Schedule,PEP 251 – Python 2.2 Release Schedule,Final
PEP 250 – Using site-packages on Windows,PEP 250 – Using site-packages on Windows,Final
PEP 246 – Object Adaptation,PEP 246 – Object Adaptation,Rejected
PEP 247 – API for Cryptographic Hash Functions,PEP 247 – API for Cryptographic Hash Functions,Final
PEP 248 – Python Database API Specification v1.0,PEP 248 – Python Database API Specification v1.0,Final
PEP 249 – Python Database API Specification v2.0,PEP 249 – Python Database API Specification v2.0,Final
PEP 243 – Module Repository Upload Mechanism,PEP 243 – Module Repository Upload Mechanism,Withdrawn
PEP 242 – Numeric Kinds,PEP 242 – Numeric Kinds,Rejected
PEP 245 – Python Interface Syntax,PEP 245 – Python Interface Syntax,Rejected
PEP 244 – The ,PEP 244 – The,Rejected
PEP 241 – Metadata for Python Software Packages,PEP 241 – Metadata for Python Software Packages,Superseded
PEP 240 – Adding a Rational Literal to Python,PEP 240 – Adding a Rational Literal to Python,Rejected
PEP 239 – Adding a Rational Type to Python,PEP 239 – Adding a Rational Type to Python,Rejected
PEP 238 – Changing the Division Operator,PEP 238 – Changing the Division Operator,Final
PEP 237 – Unifying Long Integers and Integers,PEP 237 – Unifying Long Integers and Integers,Final
PEP 234 – Iterators,PEP 234 – Iterators,Final
PEP 236 – Back to the __future__,PEP 236 – Back to the __future__,Final
PEP 235 – Import on Case-Insensitive Platforms,PEP 235 – Import on Case-Insensitive Platforms,Final
PEP 229 – Using Distutils to Build Python,PEP 229 – Using Distutils to Build Python,Final
PEP 228 – Reworking Python’s Numeric Model,PEP 228 – Reworking Python’s Numeric Model,Withdrawn
PEP 227 – Statically Nested Scopes,PEP 227 – Statically Nested Scopes,Final
PEP 226 – Python 2.1 Release Schedule,PEP 226 – Python 2.1 Release Schedule,Final
PEP 232 – Function Attributes,PEP 232 – Function Attributes,Final
PEP 231 – __findattr__(),PEP 231 – __findattr__(),Rejected
PEP 233 – Python Online Help,PEP 233 – Python Online Help,Deferred
PEP 230 – Warning Framework,PEP 230 – Warning Framework,Final
PEP 222 – Web Library Enhancements,PEP 222 – Web Library Enhancements,Deferred
PEP 221 – Import As,PEP 221 – Import As,Final
PEP 219 – Stackless Python,PEP 219 – Stackless Python,Deferred
PEP 218 – Adding a Built-In Set Object Type,PEP 218 – Adding a Built-In Set Object Type,Final
PEP 223 – Change the Meaning of ,PEP 223 – Change the Meaning of,Final
PEP 225 – Elementwise/Objectwise Operators,PEP 225 – Elementwise/Objectwise Operators,Rejected
PEP 224 – Attribute Docstrings,PEP 224 – Attribute Docstrings,Rejected
"PEP 220 – Coroutines, Generators, Continuations","PEP 220 – Coroutines, Generators, Continuations",Rejected
PEP 217 – Display Hook for Interactive Use,PEP 217 – Display Hook for Interactive Use,Final
PEP 216 – Docstring Format,PEP 216 – Docstring Format,Rejected
PEP 215 – String Interpolation,PEP 215 – String Interpolation,Superseded
PEP 213 – Attribute Access Handlers,PEP 213 – Attribute Access Handlers,Deferred
PEP 214 – Extended Print Statement,PEP 214 – Extended Print Statement,Final
PEP 211 – Adding A New Outer Product Operator,PEP 211 – Adding A New Outer Product Operator,Rejected
PEP 212 – Loop Counter Iteration,PEP 212 – Loop Counter Iteration,Rejected
PEP 210 – Decoupling the Interpreter Loop,PEP 210 – Decoupling the Interpreter Loop,Rejected
PEP 209 – Multi-dimensional Arrays,PEP 209 – Multi-dimensional Arrays,Withdrawn
PEP 208 – Reworking the Coercion Model,PEP 208 – Reworking the Coercion Model,Final
PEP 207 – Rich Comparisons,PEP 207 – Rich Comparisons,Final
PEP 205 – Weak References,PEP 205 – Weak References,Final
PEP 206 – Python Advanced Library,PEP 206 – Python Advanced Library,Withdrawn
PEP 203 – Augmented Assignments,PEP 203 – Augmented Assignments,Final
PEP 204 – Range Literals,PEP 204 – Range Literals,Rejected
PEP 202 – List Comprehensions,PEP 202 – List Comprehensions,Final
PEP 6 – Bug Fix Releases,PEP 6 – Bug Fix Releases,Active
PEP 201 – Lockstep Iteration,PEP 201 – Lockstep Iteration,Final
PEP 5 – Guidelines for Language Evolution,PEP 5 – Guidelines for Language Evolution,Active
PEP 4 – Deprecation of Standard Modules,PEP 4 – Deprecation of Standard Modules,Active
PEP 3 – Guidelines for Handling Bug Reports,PEP 3 – Guidelines for Handling Bug Reports,Withdrawn
PEP 2 – Procedure for Adding New Modules,PEP 2 – Procedure for Adding New Modules,Active
